syntax = "proto3";

package snarkvm.ir;

message Instruction {
    uint32 opcode = 1;
    repeated Operand operands = 2;
}

enum GroupCoordinateType {
    Field = 0;
    SignHigh = 1;
    SignLow = 2;
    Inferred = 3;
}

message GroupCoordinate {
    GroupCoordinateType coordinate_type = 1;
    repeated fixed64 value = 2;
}

message Group {
    GroupCoordinate left = 1;
    GroupCoordinate right = 2;
}

message Address {
    bytes address = 1;
}

message Bool {
    bool boolean = 1;
}

message Char {
    uint32 char = 1;
}

message U8 {
    uint32 u8 = 1;
}

message U16 {
    uint32 u16 = 1;
}

message U32 {
    uint32 u32 = 1;
}

message U64 {
    uint64 u64 = 1;
}

message U128 {
    bytes u128 = 1;
}

message I8 {
    sint32 i8 = 1;
}

message I16 {
    sint32 i16 = 1;
}

message I32 {
    sint32 i32 = 1;
}

message I64 {
    sint64 i64 = 1;
}

message I128 {
    bytes i128 = 1;
}

message VariableRef {
    uint32 variable_ref = 1;
}

message Array {
    repeated Operand array = 1;
}

message Tuple {
    repeated Operand tuple = 1;
}

message Operand {
    Address address = 1;
    Bool boolean = 2;
    Char char = 3;
    repeated fixed64 field = 4;
    repeated fixed64 group_single = 5;
    Group group_tuple = 6;
    U8 u8 = 7;
    U16 u16 = 8;
    U32 u32 = 9;
    U64 u64 = 10;
    U128 u128 = 11;
    I8 i8 = 12;
    I16 i16 = 13;
    I32 i32 = 14;
    I64 i64 = 15;
    I128 i128 = 16;
    Array array = 17;
    Tuple tuple = 18;
    VariableRef variable_ref = 19;
}

message Type {
    TypeClass class = 1;
    uint32 array_length = 2;
    repeated Type subtypes = 3;
}

enum TypeClass {
    TypeAddress = 0;
    TypeBoolean = 1;
    TypeField = 2;
    TypeGroup = 3;

    TypeU8 = 4;
    TypeU16 = 5;
    TypeU32 = 6;
    TypeU64 = 7;
    TypeU128 = 8;
    TypeI8 = 9;
    TypeI16 = 10;
    TypeI32 = 11;
    TypeI64 = 12;
    TypeI128 = 13;

    TypeArray = 14;
    TypeTuple = 15;
}

message Header {
    repeated uint32 function_offsets = 1;
    uint32 snarkvm_major = 2;
    uint32 snarkvm_minor = 3;
    uint32 snarkvm_patch = 4;
    repeated Type main_input_types = 5;
    repeated Type constant_input_types = 6;
    repeated Type register_input_types = 7;
    repeated Type public_state_types = 8;
    repeated Type private_record_state_types = 9;
    repeated Type private_leaf_state_types = 10;
}

message Program {
    Header header = 1;
    repeated Instruction instructions = 2;
}